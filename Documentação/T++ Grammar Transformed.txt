T++ Grammar transformed.

Exemplo de eliminação

E -> E + T
	| T

E -> T E'

E' -> + T E'
	|

Gramática atualizada

<type> ::= 'vazio'
		| 'inteiro'
		| 'flutuante'

<variableDec> ::= <type> ':' 'id' 

<operationsExp> ::= <equalityExp>
				| <relationalExp>
				| <additiveExp>
				| <multiplicativeExp>

<equalityExp> ::= <relationalExp> <equalityExpTransformed>

<equalityExpTransformed> ::= NULL
							| '=' <relationalExp> <equalityExpTransformed>

<relationalExp> ::= <additiveExp> <relationalExpTransformed>

<relationalExpTransformed> ::= NULL
							| < <additiveExp> <relationalExpTransformed>
							| > <additiveExp> <relationalExpTransformed>
							| <= <additiveExp> <relationalExpTransformed>
							| >= <additiveExp> <relationalExpTransformed>

<additiveExp> ::= <multiplicativeExp> <additiveExpTransformed>

<additiveExpTransformed> ::= NULL
							| + <multiplicativeExp> <additiveExpTransformed>
							| - <multiplicativeExp> <additiveExpTransformed> 		

<multiplicativeExp> ::= <factor> <multiplicationExpTransformed>

<multiplicationExpTransformed> ::= NULL
					| * <factor> <multiplicationExpTransformed>
					| / <factor> <multiplicationExpTransformed>

<factor> ::= '(' <operationsExp> ')'
			| 'numberFloat'
			| 'numberInt'
			| 'id'

<prototypeDef> ::= '(' <paramFunction> ')'

<paramFunction> ::= NULL
				| <variableDec> ',' <paramFunction>
				| <variableDec>

<functionDec> ::= <type> 'id' <prototypeDef> <compoundStmt> 'fim'

<prototypeCall> ::= NULL
				| <ioTypes> ',' <protypeCall>
				| <ioType>

<functionCall> ::= 'id' '(' <paramCall> ')' 

<iterationExp> ::= 'repita' <compoundStmt> 'até' <boolExp> 'fim'

<selectionExp> ::= 'se' <boolExp> 'então' <compoundStmt>
				| 'se' <boolExp> 'então' <compoundStmt> 'senão' <compoundStmt> 'fim'

<ioTypes> ::= 'id'
			| 'numberInt'
			| 'numberFloat'
			| <functionCall>

<attributionExp> ::= 'id' ':=' <ioType>

<returnCom> ::= 'retorna' '(' <ioTypes> ')'

<readCom> ::= 'leia' '(' <ioTypes> ')'

<writeCom> ::= 'escreve' '(' <ioTypes> ')'

<compoundStmt> ::= <expression> <compoundStmt>
				| <expression>

<expression> ::= <selectionExp>
				| <iterationExp>
				| <functionCall>
				| <readCom>
				| <writeCom>
				| <returnCom>
				| <variableDec>
				| <attributionExp>